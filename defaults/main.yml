---
# For old installation use 'openvpn' name, for new use 'server'.
server_conf_name: openvpn

# Filename for target server keypair file. It can be useful in case
# you already had some OpenVPN PKI and now just want to migrate to the new
# version, so if you had OpenVPN server keys named after 'some.name.[key,crt]'
# and will set server_name var to 'some.name', your keys won't be regenerated
# and you will continue to use old ones.
server_name: localhost

# Hostname which clients should connect to. In case you will
# use it, exactly that name will be shown in client ovpn file as server to
# connect to, otherwise 'server_name' var will be used. Optional.
#real_server_name: 100.100.100.100

# Available options: subnet, net30, p2p. In case dev_type is tap, has no
# no meaning and p2p will always be used
topology: subnet
client_config_dir_path: /etc/openvpn/ccd
persist_tun: True
persist_key: True
# List of additional pushes which will be advertised for all clients.
additional_pushes:
 - "redirect-gateway def1"
# Whether we should allow users to reach internet
allow_masquerade: True
# Server address and type
server_port: 1494
management_address: 127.0.0.1
protocol: udp
# Valid values: tun, tap
dev_type: tun
# If False, ta.key won't be included
use_tls_auth: True
# Public address to bind. Can be specified if needed to bind to exact interface
# address_to_bind: 127.0.0.1
vpn_network: 10.10.0.0
vpn_netmask: 255.255.255.0
vpn_cidr: 24
# nopool parameter disables internal DHCP clients pool, so if it is enabled
# then user IPs should be set either manually or only static IPs should be
# used
nopool: False
# ifconfig-pool can be used with nopool in conjunction in standard format like
# 10.10.0.2 10.10.0.253 255.255.255.0
ifconfig_pool: False
dns_pushes:
  - 8.8.8.8
  - 8.8.4.4
ping: 5
ping_restart: 30
comp_lzo: False
syslog_name: openvpn
# Prefix for fetched to local host certificate name. Empty by default
cert_prefix: ""
auth: SHA512
cipher: AES-256-CBC
duplicate_cn: True
client_to_client: True
enable_logging: False
# List of additional configs to add to server configuration. One config line
# per list element, like ['tun-mtu 1420', 'topology subnet',
# 'explicit-exit-notify 1']
additional_configs: []
iptables_configure: True
# Additionally user VPN config can be sent to user email after creation. There
# are needed options for that
# mail:
#   host: smtp.google.com
#   port: 587
#   user: user
#   secret: password
#   subject: "VPN configuration"
#   body: "Your new VPN configuration is in attach"
mail: {}
ca:
  country: RU
  province: MSK
  city: Moscow
  org: Unknown
  ou: DevOps
  email: admin@localhost
# There are two main ways to get clients list from. First is local list there,
# in Ansible variables. Second is LDAP.
#
# So, first go to the local clients list options.
#
# List of clients to issue certificate for. In case this list will be less
# than server active clients, non-existing in this list will be revoked.
# List of users consists of none or more hashes with appropriate values. Next
# values are supported:
# - name: Is the name of client. Required
# - email: Client email. If exists, created .ovpn file will be sent to it.
#          Optional
# - ip_info: IP address and subnet mask of client. If exists, will be set to
#            client CCD ifconfig-push. Optional
# Example of clients list:
# clients:
#   - name: user
#     email: user@example.com
#     ip_info: "192.168.0.1 255.255.255.0"
# Default clients list is empty.
clients: []
#
# Second, LDAP clients list options
ldap_config:
  host: localhost
  port: 3389
  auth_password: ldap_password
  bind_dn: 'CN=VPN,OU=Managed Accounts,DC=example,DC=com'
  vpn_group: 'CN=VPN_ACCESS,DC=example,DC=com'
  group_client_attribute: 'member'
  client_name_attribute: 'sAMAccountName'
  client_email_attribute: 'userPrincipalName'
use_ldap: False
enable_2fa: False
client_2fa_dir_path: /etc/openvpn/client_2fa
client_2fa_server_description: "{{ server_name }}"

use_ui: false
