---
- name: "VPN | Keys creation | Ensure {{ user.name }} keys directories"
  file:
    path: /etc/openvpn/client_keys/{{ user.name }}
    state: directory
  tags:
    - create_users
    - openvpn_users

- name: VPN | Key creation | Set vars
  ansible.builtin.set_fact:
    client_key_path: /etc/openvpn/easy-rsa/keys/{{ user.name }}.key
    client_crt_path: /etc/openvpn/easy-rsa/keys/{{ user.name }}.crt
    arg_creates: "/etc/openvpn/easy-rsa/keys/{{ user.name }}.crt"
    cert_gen_shell: ". ./vars ; ./build-key --batch {{ user.name }}"
  when:
    - ansible_distribution_release|lower in ['xenial', 'bionic']
  tags:
    - create_users
    - openvpn_users

- name: VPN | Key creation | Set vars
  ansible.builtin.set_fact:
    client_key_path: /etc/openvpn/easy-rsa/pki/private/{{ user.name }}.key
    client_crt_path: /etc/openvpn/easy-rsa/pki/issued/{{ user.name }}.crt
    arg_creates: "/etc/openvpn/easy-rsa/pki/private/{{ user.name }}.key"
    cert_gen_shell: "./easyrsa --batch build-client-full {{ user.name }} nopass"
  when:
    - ansible_distribution_release|lower in ['focal', 'jammy']
  tags:
    - create_users
    - openvpn_users

- name: VPN | Keys creation | Generate client certificates
  shell: "{{ cert_gen_shell }}"
  args:
    chdir: /etc/openvpn/easy-rsa
    creates: "{{ arg_creates }}"
  register: user_cert
  tags:
    - create_users
    - openvpn_users

- name: VPN | Client config creation | Ensure user ccd file from ip-info block
  copy:
    content: "ifconfig-push {{ user.ip_info }}"
    dest: "{{ client_config_dir_path }}/{{ user.name }}"
    owner: root
    group: root
    mode: 0755
  when: user.ip_info is defined
  tags:
  - create_users
  - openvpn_users

- name: VPN | Client config creation | Ensure user ccd file
  template:
    src: ccd
    dest: "{{ client_config_dir_path }}/{{ user.name }}"
    owner: root
    group: root
    mode: 0755
  when: user.ccd is defined
  tags:
  - create_users
  - openvpn_users

- name: VPN | Client config creation | Register server CA key
  slurp:
    src: "/etc/openvpn/server_keys/ca.crt"
  register: ca_cert
  tags:
    - create_users
    - openvpn_users

- name: VPN | Client config creation | Register tls-auth key
  slurp:
    src: "/etc/openvpn/server_keys/ta.key"
  register: tls_auth
  tags:
    - create_users
    - openvpn_users

- name: VPN | Client config creation | Register client cert
  slurp:
    src: "{{ client_crt_path }}"
  register: client_cert
  tags:
    - create_users
    - openvpn_users

- name: VPN | Client config creation | Register client key
  slurp:
    src: "{{ client_key_path }}"
  register: client_key
  tags:
    - create_users
    - openvpn_users

- name: VPN | Client config creation | Generate client config
  template:
    src: client.ovpn
    dest: /etc/openvpn/client_keys/{{ user.name }}/{{ user.name }}.ovpn
    owner: root
    group: root
    mode: 0400
  tags:
    - create_users
    - openvpn_users

- name: VPN | Client config creation | Create conf directory
  file: 
    path: /etc/openvpn/config
    state: directory
    owner: root
    group: root
    mode: 0755
  tags: 
    - create_users
    - openvpn_users
  when: use_ui

- name: VPN | Client config creation | Generate config for ui
  template:
    src: templates/client.conf
    dest: /etc/openvpn/config/client.conf
    owner: root
    group: root
    mode: 0666
  tags: 
    - create_users
    - openvpn_users
  when: use_ui

- name: VPN | Client config creation | Fetch client config to localhost
  fetch:
    src: /etc/openvpn/client_keys/{{ user.name }}/{{ user.name }}.ovpn
    dest: /tmp/{{ cert_prefix }}{{ user.name }}.ovpn
    flat: yes
  when: user_cert.changed
  tags:
    - create_users
    - openvpn_users

- name: VPN | Key creation | Set var google_auth_add_args
  ansible.builtin.set_fact:
    google_auth_add_args:  "-l {{ user.name }} -i {{ client_2fa_server_description }}"
  when:
    - enable_2fa
    - ansible_distribution_release != 'xenial'

- name: VPN | Client config creation | Ensure user 2fa configuration
  become: yes
  become_user: root
  shell:
    cmd: |
      google-authenticator -t -s {{ user.name }} -f -Q UTF8 -d -w 1 -r 3 -R 30 {{ google_auth_add_args | default("") }}
    creates: "{{ client_2fa_dir_path }}/{{ user.name }}"
  register: info_2fa
  when:
    - enable_2fa
  args:
    chdir: "{{ client_2fa_dir_path }}"
  tags:
  - create_users
  - openvpn_users
  - 2fa

- name: VPN | Client config creation | Ensure 2fa info for user
  become: yes
  become_user: root
  copy:
    dest: "{{ client_2fa_dir_path }}/{{ user.name }}.2fa_info"
    content: |
      These are values to ensure your 2FA settings for given OpenVPN config file:

        QR code link: {{ info_2fa.stdout_lines[0] | regex_replace('^(.*)root@.*(%3Fsecret.*)$', '\1' + client_2fa_server_description | urlencode + '%20(' + user.name + ')\2') }}
        {% for line in info_2fa.stdout_lines[1:] %}
        {{ line }}
        {% endfor %}
  when:
    - enable_2fa
    - info_2fa.changed
    - ansible_distribution_release == 'xenial'
  tags:
  - create_users
  - openvpn_users
  - 2fa

- name: VPN | Client config creation | Ensure 2fa info for user
  become: yes
  become_user: root
  copy:
    dest: "{{ client_2fa_dir_path }}/{{ user.name }}.2fa_info"
    content: |
      These are values to ensure your 2FA settings for given OpenVPN config file:
      {{ info_2fa.stdout }}
  when:
    - enable_2fa
    - info_2fa.changed
    - ansible_distribution_release != 'xenial'
  tags:
  - create_users
  - openvpn_users
  - 2fa

- name: VPN | Client config creation | Fetch client config to localhost
  fetch:
    src: "{{ client_2fa_dir_path }}/{{ user.name }}.2fa_info"
    dest: /tmp/{{ cert_prefix }}{{ user.name }}.2fa_info
    flat: yes
  when: info_2fa.changed
  tags:
  - create_users
  - openvpn_users
  - 2fa

- name: VPN | Client config creation | Ensure proper permissions on the 2fa files
  file:
    path: "{{ item }}"
    owner: root
    group: root
    mode: 0400
  when: enable_2fa
  with_items:
    - "{{ client_2fa_dir_path }}/{{ user.name }}"
    - "{{ client_2fa_dir_path }}/{{ user.name }}.2fa_info"
  tags:
  - create_users
  - openvpn_users
  - 2fa

- name: VPN | Client config creation | Send config to user email
  mail:
    host: "{{ mail.host }}"
    port: "{{ mail.port }}"
    username: "{{ mail.user }}"
    sender: "{{ mail.user }}"
    password: "{{ mail.secret }}"
    to: "{{ user.email }}"
    subject: "{{ mail.subject }}"
    body: "{{ mail.body }}"
    attach: ["/etc/openvpn/client_keys/{{ user.name }}/{{ user.name }}.ovpn"]
  when: user.email is defined and mail.host is defined and user_cert.changed
  failed_when: False
  tags:
    - create_users
    - openvpn_users
    - send_mails
